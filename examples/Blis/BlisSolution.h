/*===========================================================================*
 * This file is part of the Bcps Linear Solver (BLIS).                       *
 *                                                                           *
 * ALPS is distributed under the Eclipse Public License as part of the       *
 * COIN-OR repository (http://www.coin-or.org).                              *
 *                                                                           *
 * Authors:                                                                  *
 *                                                                           *
 *          Yan Xu, Lehigh University                                        *
 *          Ted Ralphs, Lehigh University                                    *
 *                                                                           *
 * Conceptual Design:                                                        *
 *                                                                           *
 *          Yan Xu, Lehigh University                                        *
 *          Ted Ralphs, Lehigh University                                    *
 *          Laszlo Ladanyi, IBM T.J. Watson Research Center                  *
 *          Matthew Saltzman, Clemson University                             *
 *                                                                           *
 *                                                                           *
 * Copyright (C) 2001-2017, Lehigh University, Yan Xu, and Ted Ralphs.       *
 * All Rights Reserved.                                                      *
 *===========================================================================*/

#ifndef BlisSolution_h_
#define BlisSolution_h_

#include "Alps.h"
#include "BcpsSolution.h"

//#############################################################################
/** This class contains the solutions generated by the LP solver (either
    primal or dual. The class exists primarily to pass solutions to the
    object generator(s). */
//#############################################################################

class BlisSolution : public BcpsSolution {

 public:

    /** Default constructor. */
    BlisSolution() {}

    /** Useful constructor. */
    BlisSolution(int s, const double *values, double objValue)
	:
	BcpsSolution(s, values, objValue)
	{}

    /** Destructor. */
    virtual ~BlisSolution() { }
    virtual BcpsSolution * selectNonzeros(const double etol=1e-5) const {
        std::cerr << "Not implemented yet!" << std::endl;
        throw std::exception();
        return NULL;
    }
    virtual BcpsSolution * selectFractional(const double etol=1e-5) const {
        std::cerr << "Not implemented yet!" << std::endl;
        throw std::exception();
        return NULL;
    }

    ///@name Encode and Decode functions
    //@{
    /// Get encode defined in AlpsKnowledge.
    /// Encodes the solution into AlpsEncoded object and return pointer to it.
    using AlpsKnowledge::encode;
    /// Encode this into the given AlpsEncoded object.
    virtual AlpsReturnStatus encode(AlpsEncoded * encoded) const {
        AlpsReturnStatus status;
        status = AlpsSolution::encode(encoded);
        if (status!=AlpsReturnStatusOk) {
          std::cerr << "Unexpected decode status, "
                    << "file: " <<  __FILE__
                    << "line: " << __LINE__
                    << std::endl;
          throw std::exception();
        }
        status = BcpsSolution::encode(encoded);
        if (status!=AlpsReturnStatusOk) {
          std::cerr << "Unexpected decode status, "
                    << "file: " <<  __FILE__
                    << "line: " << __LINE__
                    << std::endl;
          throw std::exception();
        }
        // Nothing to do for Blis part.
        return status;
    }

    /// Decodes the given object into a new solution and returns the pointer to
    /// it.
    virtual AlpsKnowledge * decode(AlpsEncoded & encoded) const {
        AlpsReturnStatus status;
        BlisSolution * sol = new BlisSolution();
        sol->setBroker(broker_);
        status = sol->decodeToSelf(encoded);
        if (status!=AlpsReturnStatusOk) {
          std::cerr << "Unexpected decode status, "
                    << "file: " <<  __FILE__
                    << "line: " << __LINE__
                    << std::endl;
          throw std::exception();
        }
        return sol;
    }

    /// Decode the given AlpsEncoded object into this.
    virtual AlpsReturnStatus decodeToSelf(AlpsEncoded & encoded) {
        assert(broker_);
        AlpsReturnStatus status;
        status = AlpsSolution::decodeToSelf(encoded);
        if (status!=AlpsReturnStatusOk) {
            std::cerr << "Unexpected decode status, "
                      << "file: " <<  __FILE__
                      << "line: " << __LINE__
                      << std::endl;
            throw std::exception();
        }
        status = BcpsSolution::decodeToSelf(encoded);
        if (status!=AlpsReturnStatusOk) {
            std::cerr << "Unexpected decode status, "
                      << "file: " <<  __FILE__
                      << "line: " << __LINE__
                      << std::endl;
            throw std::exception();
        }
        return status;
    }
    //@}
};

//#############################################################################
//#############################################################################

#endif
